---
title: "wrangling-andcleaning"
author: "Taylor"
format: html
editor: visual
---

## Load Libraries

```{r}
library(dplyr)
library(tidyr)
library(readr)
```

## Load Data

bit.ly/data-wrangle-lesson-data

```{r}
catch_original <- read_csv("https://knb.ecoinformatics.org/knb/d1/mn/v2/object/df35b.302.1")
```

## Data Cleaning and Wrangling

### Initial Data Exploration

```{r}
colnames(catch_original)
```

```{r}
# first 6 lines of data
head(catch_original)
```

```{r}
#summary of each column in data frame
summary(catch_original)
```

```{r}
#gives the unique values in a specific column
unique(catch_original$Region)
```

```{r}
#opens view tab of the data frame
#if leave in code, will give an error when rendoring, usually something you'd use in console
#View(catch_original)
```

## Pipe Operator

## Select columns

Goal: remove `All` and `notersRedCode` columns

```{r}
#selects the columns you want
#in tidyverse this works with or without quotes
catch_data <- catch_original %>% 
  select("Region", "Year", "Chinook", "Sockeye",  "Coho", "Pink", "Chum")
```

```{r}
#another way to remove columns
catch_original %>%  select(-All, -notesRegCode)
```

## Quality Check

```{r}
#when we want to specify which package our function is from, we list the package then :: then the function
#warning when you load a package show which function names overlap
dplyr::glimpse(catch_data)
#dbl=number
```

## Change column content

Goal: convert the Chinook catch values to `numeric` and overwrite the old Chinook column

```{r}
#mutate, first argument we give is the column we want to create. It will overwrite since it is a name already in the data frame
catch_clean <- catch_data %>% 
  mutate(Chinook = as.numeric(Chinook))
#warning means it tried to convert something not numeric into a number
```

## Find the row tih `NA` value

```{r}
#gives row that has NA value
#is.na gives FALSE if value is not NA and TRUE if it is
#which function gives the values that are TRUE
which(is.na(catch_clean$Chinook))

#rewrite with pipe operator:

i <- catch_clean$Chinook %>% 
  is.na() %>% 
  which()
i

#gives row info for the NA
catch_clean %>% filter(is.na(catch_clean$Chinook))
```

```{r}
catch_data[i,]
```

Goal: change the value of the `Chinook` column to 1 if the value is equal to the letter I

```{r}
catch_clean <- catch_data %>% 
  mutate(Chinook = 
           if_else(condition = Chinook=="I", 
                   true = "1",
                   false = Chinook),
         Chinook = as.numeric(Chinook))
catch_clean
```

```{r}
catch_clean[i,]
```

## `pivot_longer()` and `pivot_wider()`

Goal: transform data from wide format to a long format

```{r}
catch_long <- catch_clean %>% 
  #pivot longer all columns except Region and Year
  pivot_longer(
    cols = -c(Region, Year),
    names_to = "Species", #name of column we are creating from pivoting columns over
    values_to = "catch" #name of column we are creating from the values of the columns we are pivoting
  )
```

```{r}
#switch back to wide format
catch_long %>% 
  pivot_wider(names_from = Species,
              values_from =catch)
```

## Renaming columns

Goal: rename the `catch` column to be called `catch_thousands`

```{r}
catch_long <- catch_long %>% 
  rename(catch_thousands = catch)

head(catch_long)
```

## Adding columns with `mutate()`

Goal: create a column `catch` with units of fish instead of thousands of fish

```{r}
catch_long <- catch_long %>% 
  mutate(catch = catch_thousands*1000)

head(catch_long)
```

Goal: remove `catch_thousands` column

```{r}
catch_long <- catch_long %>% 
  select(-catch_thousands)

head(catch_long)
```

## Summary Statistics

Goal: getting the average catch per region

bit.ly/3ppGUsQ

```{r}
mean_region <- catch_long %>% 
  group_by(Region) %>% 
  summarize(mean_catch = mean(catch))

head(mean_region)
```

## `filter()`

Goal: go back to our `catch_long` data frame and select all the rows from the SSE region

```{r}
sse_catch <- catch_long %>% 
  filter(Region == "SSE")

head(sse_catch)
```

Quick exercise: 1. filter to catches over one million fish 2. select rows from the SSE region that have information about Chinook salmon

```{r}
million <- catch_long %>% 
  filter(catch > 1000000)

million
```

```{r}
sse_chinook <- catch_long %>% 
  filter(Region == "SSE") %>% 
  filter(Species == "Chinook")
#this one only gave 6 rows?

#or
#catch_long %>% 
  #filter(Region == "SSE",
  #Species == "Chinkook")

#comma after region is an "and"

#catch_long %>% 
  #filter(Region == "SSE",
         #Species == "Chinook")
sse_chinook
```

## Sorting data

Goal: re-calculate mean catch by region, and then sort the output by mean catch

```{r}
mean_region <- catch_long %>% 
  group_by(Region) %>% 
  summarize(mean_catch == mean(catch)) %>% 
  arrange(mean_catch)

head(mean_region)
```

Order them in descending order

```{r}
mean_region <- catch_long %>% 
  group_by(Region) %>% 
  summarize(mean_catch == mean(catch)) %>% 
  arrange(desc(mean_catch))

head(mean_region)
```

## `separate()` and `unite()`

```{r}
sites_df <- data.frame(site=c("HAW-101",
                              "HAW-103",
                              "OAH-320",
                              "OAH-219",
                              "MAI-039"))

df <- sites_df %>% 
  separate(site, c("island", "site_number"), "-")
#dash indicates the separator
df
```

```{r}
df %>% 
  unite(code, island, site_number, sep="-")
#code is the  new column name
```

## Grand finale (13.15)

```{r}

```
